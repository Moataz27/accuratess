type Mutation {
	login(input: LoginInput!): UserWithToken!
	saveShipment(input: ShipmentInput!): Shipment
	updateShipmentStatus(input: UpdateShipmentStatusInput!): Shipment!
	savePickup(input: PickupInput!): Pickup!
}

type Query {
	listZonesDropdown(input: ListZonesFilterInput): [DropDownEntry]
	shipment(id: Int, code: String): Shipment
	listShipments(
		input: ListShipmentsFilterInput

		"""
		Limits number of fetched items. Maximum allowed value: 100.
		"""
		first: Int! = 10

		"""
		The offset from which items are returned.
		"""
		page: Int
	): ShipmentPaginator!
	listPickups(
		input: ListPickupsFilterInput

		"""
		Limits number of fetched items. Maximum allowed value: 100.
		"""
		first: Int! = 10

		"""
		The offset from which items are returned.
		"""
		page: Int
	): PickupPaginator!
	pickup(id: Int!): Pickup
	listShipmentsForPickup(
		id: Int!
		filter: ListShipmentsFilterInput

		"""
		Limits number of fetched items. Maximum allowed value: 100.
		"""
		first: Int! = 10

		"""
		The offset from which items are returned.
		"""
		page: Int
	): ShipmentForPickupPaginator!
	listPaymentTypesDropdown(
		input: ListPaymentTypesDropdownInput
	): [DropDownEntry]
	listShippingServicesDropdown(
		input: ListShippingServicesFilterInput
	): [DropDownEntry]!
	customer(id: Int!): Customer
	listNotifications(
		"""
		Limits number of fetched items. Maximum allowed value: 100.
		"""
		first: Int! = 10

		"""
		The offset from which items are returned.
		"""
		page: Int
	): NotificationPaginator!
	listMessages(
		shipmentId: Int
		asConversation: Boolean
		receivedOnly: Boolean

		"""
		Limits number of fetched items. Maximum allowed value: 100.
		"""
		first: Int! = 10

		"""
		The offset from which items are returned.
		"""
		page: Int
	): ShipmentMessagePaginator!
	listPayments(
		input: ListPaymentFilterInput!

		"""
		Limits number of fetched items. Maximum allowed value: 100.
		"""
		first: Int! = 10

		"""
		The offset from which items are returned.
		"""
		page: Int
	): PaymentPaginator!
	sumPayments(input: ListPaymentFilterInput): PaymentSum
	listTickets(
		input: ListTicketsFilterInput

		"""
		Limits number of fetched items. Maximum allowed value: 100.
		"""
		first: Int! = 10

		"""
		The offset from which items are returned.
		"""
		page: Int
	): TicketPaginator!
	listCustomerRequests(
		input: ListCustomerRequestFilterInput!

		"""
		Limits number of fetched items. Maximum allowed value: 100.
		"""
		first: Int! = 10

		"""
		The offset from which items are returned.
		"""
		page: Int
	): CustomerRequestPaginator!
	sumShipments(input: ListShipmentsFilterInput): ShipmentsSum
	calculateShipmentFees(input: CalculateShipmentFeesInput!): ShipmentFees!
	trackShipmentUniversally(code: String!): Shipment
}
scalar DateTime

scalar Date

scalar Time

scalar Upload

type ShipmentFees {
	amount: Float!
	delivery: Float!
	weight: Float!
	collection: Float!
	post: Float!
	tax: Float!
	return: Float!
	total: Float!
}

input CalculateShipmentFeesInput {
	customerTypeCode: CustomerTypeCode
	serviceId: Int!
	weight: Float!
	senderZoneId: Int
	senderSubzoneId: Int
	recipientZoneId: Int!
	recipientSubzoneId: Int!
	size: BoxSizeInput
	customerId: Int
	price: Float!
	priceTypeCode: ShipmentPriceTypeCode
	paymentTypeCode: ShipmentPaymentTypeCode
	deliveryFees: Float
	extraWeightFees: Float
	collectionFees: Float
	returnFees: Float
}

"""
Payment type code
"""
enum PaymentTypeCode {
	"""
	Custm
	"""
	CUSTM

	"""
	Dlvby
	"""
	DLVBY
}

type ShipmentsSum {
	price: Float
	allDueFees: Float
	deliveredAmount: Float
	collectedFees: Float
	pendingCollectionAmount: Float
	collectedAmount: Float
	amount: Float
	totalAmount: Float
	customerDue: Float
	customerDueCredit: Float
	customerDueDebit: Float
	returningDueFees: Float
	deliveryCommission: Float
}

type CustomerRequest {
	id: Int!
	date: DateTime
	payment: Payment
	customer: Customer!
	branch: Branch!
	payeeName: String!
	type: LookupEntry!
	status: LookupEntry!
	deliveryType: LookupEntry!
	notes: String
	editable: Boolean!
	deletable: Boolean!
	createdAt: DateTime!
	createdBy: User!
	updatedBy: User
}
"""
A paginated list of CustomerRequest items.
"""
type CustomerRequestPaginator {
	"""
	Pagination information about the list of items.
	"""
	paginatorInfo: PaginatorInfo!

	"""
	A list of CustomerRequest items.
	"""
	data: [CustomerRequest!]!
}

input ListCustomerRequestFilterInput {
	payeeName: String
	statusCode: CustomerRequestStatusCode
	deliveryTypeCode: CustomerRequestDeliveryTypeCode
	typeCode: CustomerRequestTypeCode!
	deliveryAgentId: Int
	branchId: Int
	customerId: Int
	manifestId: Int
	paymentId: Int
	fromDate: Date
	toDate: Date
	new: Boolean
}

"""
Customer request type code
"""
enum CustomerRequestTypeCode {
	"""
	Pmnt
	"""
	PMNT

	"""
	Rtrn
	"""
	RTRN

	"""
	Mtrl
	"""
	MTRL
}

"""
Customer request delivery type code
"""
enum CustomerRequestDeliveryTypeCode {
	"""
	Office
	"""
	OFFICE

	"""
	Deliveryagent
	"""
	DELIVERYAGENT

	"""
	Bnk
	"""
	BNK

	"""
	Wlt
	"""
	WLT
}

"""
Customer request status code
"""
enum CustomerRequestStatusCode {
	"""
	New
	"""
	NEW

	"""
	Inprogress
	"""
	INPROGRESS

	"""
	Delivered
	"""
	DELIVERED

	"""
	Cancelled
	"""
	CANCELLED

	"""
	Finished
	"""
	FINISHED
}

"""
A paginated list of Ticket items.
"""
type TicketPaginator {
	"""
	Pagination information about the list of items.
	"""
	paginatorInfo: PaginatorInfo!

	"""
	A list of Ticket items.
	"""
	data: [Ticket!]!
}

type Ticket {
	id: Int!
	code: String!
	title: String!
	body: String!
	customer: Customer!
	status: LookupEntry!
	assignee: User
	images: [Image]
	createdAt: DateTime!
	updatedAt: DateTime
	createdBy: User!
	updatedBy: User
	history: [Ticket!]!
	replies: [TicketReply!]!
}

type TicketReply {
	id: Int!
	body: String
	ticket: Ticket!
	createdBy: User!
	images: [Image]
	createdAt: DateTime!
}

input ListTicketsFilterInput {
	code: String
	statusCode: TicketStatusCode
	title: String
	assigneeId: Int
	customerId: Int
	categoryId: Int
	fromDate: Date
	toDate: Date
}

"""
Ticket status code
"""
enum TicketStatusCode {
	"""
	New
	"""
	NEW

	"""
	Inprogress
	"""
	INPROGRESS

	"""
	Closed
	"""
	CLOSED

	"""
	Reopend
	"""
	REOPEND
}

type PaymentSum {
	paymentAmount: Float!
	dueFees: Float!
	entryCount: Int!
	shipmentCount: Int!
	pickupCount: Int!
	conciergeRequestCount: Int!
}

type Payment {
	id: Int!
	code: String!
	type: LookupEntry!
	branch: Branch!
	transactionType: TransactionType!
	customer: Customer
	date: DateTime!
	approved: Boolean!
	glApproved: Boolean!
	notes: String
	paymentAmount: Float
	createdBy: User!
	updatedBy: User
	deliveredAmount: Float
	weight: Float
	piecesCount: Float
	collectedFees: Float
	images: [Image]
}

"""
A paginated list of Payment items.
"""
type PaymentPaginator {
	"""
	Pagination information about the list of items.
	"""
	paginatorInfo: PaginatorInfo!

	"""
	A list of Payment items.
	"""
	data: [Payment!]!
}

"""
Transaction type code
"""
enum TransactionTypeCode {
	"""
	Bmr
	"""
	BMR

	"""
	Bmt
	"""
	BMT

	"""
	Cshc
	"""
	CSHC

	"""
	Cshp
	"""
	CSHP

	"""
	Dex
	"""
	DEX

	"""
	Dtr
	"""
	DTR

	"""
	Htr
	"""
	HTR

	"""
	Otd
	"""
	OTD

	"""
	Otr
	"""
	OTR

	"""
	Pkd
	"""
	PKD

	"""
	Pkh
	"""
	PKH

	"""
	Pkm
	"""
	PKM

	"""
	Pkr
	"""
	PKR

	"""
	Rits
	"""
	RITS

	"""
	Rjct
	"""
	RJCT

	"""
	Rtrn
	"""
	RTRN

	"""
	Rts
	"""
	RTS

	"""
	Shpinv
	"""
	SHPINV

	"""
	Prp
	"""
	PRP

	"""
	Prpd
	"""
	PRPD

	"""
	Std
	"""
	STD

	"""
	Rcv
	"""
	RCV

	"""
	Pkbk
	"""
	PKBK

	"""
	Prqst
	"""
	PRQST

	"""
	Padd
	"""
	PADD

	"""
	Prtrn
	"""
	PRTRN

	"""
	Pissue
	"""
	PISSUE

	"""
	Prts
	"""
	PRTS

	"""
	Pmbt
	"""
	PMBT

	"""
	Pmbr
	"""
	PMBR

	"""
	Top
	"""
	TOP

	"""
	Wdr
	"""
	WDR
}

input ListPaymentFilterInput {
	typeCode: PaymentTypeCode
	code: String
	transactionTypeCode: TransactionTypeCode
	customerId: Int
	fromZoneId: Int
	fromSubzoneId: Int
	toZoneId: Int
	toSubzoneId: Int
	branchId: Int
	fromDate: Date
	toDate: Date
	approved: Boolean
	glApproved: Boolean
	safeId: Int
	deliveryAgentId: Int
}

"""
A paginated list of ShipmentMessage items.
"""
type ShipmentMessagePaginator {
	"""
	Pagination information about the list of items.
	"""
	paginatorInfo: PaginatorInfo!

	"""
	A list of ShipmentMessage items.
	"""
	data: [ShipmentMessage!]!
}

type ShipmentMessage {
	id: Int!
	body: String
	hidden: Boolean!
	images: [Image]
	shipment: Shipment!
	user: User!
	createdAt: DateTime!
}

type Image {
	path: String!
	subjectCode: String
}

"""
A paginated list of Notification items.
"""
type NotificationPaginator {
	"""
	Pagination information about the list of items.
	"""
	paginatorInfo: PaginatorInfo!

	"""
	A list of Notification items.
	"""
	data: [Notification!]!
}

type Notification {
	id: String
	data: String
	readAt: Date
	createdAt: DateTime
}

type Customer {
	id: Int!
	code: String!
	name: String!
	email: String
	warehousing: Boolean!
	payUncollected: Boolean
	createdAt: Date
	createdBy: User
	postalCode: String
	mailBox: String
	sendDeliveryOtp: Boolean
	active: Boolean!
	taxable: Boolean!
	zone: Zone!
	subzone: Zone!
	branch: Branch
	country: Country
	state: State
	city: City
	area: Area
	address: String
	paymentMethod: LookupEntry
	defaultShipmentType: LookupEntry
	defaultPriceType: LookupEntry
	defaultOpenable: LookupEntry
	category: LookupEntry
	type: LookupEntry
	phone: String
	mobile: String
	vodafoneCash: String
	bankAccount: String
	representative: String
	activityName: String
	callbackUrl: String
	specifyShipmentCode: Boolean!
	shareCollectedFees: Boolean!
	latitude: Float
	longitude: Float
	paymentDue: Float!
	idNumber: String
	idType: String
	idIssueDate: Date
	idExpiryDate: Date
	taxCardNumber: String
	registrationNumber: String
	registrationDate: Date
	identificationType: LookupEntry
	paymentTypes: [LookupEntry]
	users: [User]
	paymentCycle: LookupEntry
	paymentCycleDays: [Int]
	hideMobileFrom: [LookupEntry]
}

input ListShippingServicesFilterInput {
	customerTypeCode: CustomerTypeCode
	customerId: Int
	active: Boolean
}

input ListPaymentTypesDropdownInput {
	customerId: Int
}

type ShipmentForPickup {
	shipment: Shipment!
}

"""
A paginated list of ShipmentForPickup items.
"""
type ShipmentForPickupPaginator {
	"""
	Pagination information about the list of items.
	"""
	paginatorInfo: PaginatorInfo!

	"""
	A list of ShipmentForPickup items.
	"""
	data: [ShipmentForPickup!]!
}

"""
Information about pagination using a fully featured paginator.
"""
type PaginatorInfo {
	"""
	Number of items in the current page.
	"""
	count: Int!

	"""
	Index of the current page.
	"""
	currentPage: Int!

	"""
	Index of the first item in the current page.
	"""
	firstItem: Int

	"""
	Are there more pages after this one?
	"""
	hasMorePages: Boolean!

	"""
	Index of the last item in the current page.
	"""
	lastItem: Int

	"""
	Index of the last available page.
	"""
	lastPage: Int!

	"""
	Number of items per page.
	"""
	perPage: Int!

	"""
	Number of total available items.
	"""
	total: Int!
}

"""
A paginated list of Pickup items.
"""
type PickupPaginator {
	"""
	Pagination information about the list of items.
	"""
	paginatorInfo: PaginatorInfo!

	"""
	A list of Pickup items.
	"""
	data: [Pickup!]!
}

input ListPickupsFilterInput {
	code: String
	statusCode: PickupStatusCode
	deliveryAgentId: Int
	customerId: Int
	branchId: Int
	fromDate: Date
	toDate: Date
	forPaymentId: Int
	acceptanceCode: [PickupAcceptanceCode]
	new: Boolean
}

"""
Pickup acceptance code
"""
enum PickupAcceptanceCode {
	"""
	Accepted
	"""
	ACCEPTED

	"""
	Pending
	"""
	PENDING

	"""
	Rejected
	"""
	REJECTED
}

"""
Pickup status code
"""
enum PickupStatusCode {
	"""
	New
	"""
	NEW

	"""
	Wrk
	"""
	WRK

	"""
	Cxl
	"""
	CXL

	"""
	Pkd
	"""
	PKD

	"""
	Don
	"""
	DON
}

type Pickup {
	id: Int!
	code: String!
	date: DateTime!
	timeFrom: Time
	timeTo: Time
	notes: String
	deliveryAgentNotes: String
	shipmentsCount: Int
	pickedCount: Int
	editable: Boolean!
	deletable: Boolean!
	acceptance: LookupEntry!
	paidToDeliveryAgent: Boolean!
	createdAt: DateTime
	status: LookupEntry!
	vehicle: LookupEntry
	branch: Branch!
	customer: Customer!
	transactionType: TransactionType!
	createdBy: User!
	updatedBy: User
	deliveryCommission: Float!
	payment: Payment
	commissionAmountEditable: Boolean!
}

input PickupInput {
	id: Int
	code: String
	date: DateTime
	timeFrom: Time
	timeTo: Time
	shipmentsCount: Int
	notes: String
	branchId: Int
	customerId: Int
	transactionTypeId: Int
	deliveryAgentId: Int
}

input UpdateShipmentStatusInput {
	id: Int!
	remoteShipmentId: Int
	statusCode: ShipmentStatusCode!
	deliveryTypeCode: ShipmentDeliveryTypeCode
	fees: Float
	deliveredAmount: Float
	deliveredProducts: [DeliveredProduct]
	cancellationReasonId: Int
	returnTypeCode: ShipmentReturnTypeCode
	notes: String
	deliveryOtp: String
	latitude: Float
	longitude: Float
	deliveryDate: Date
	images: [ImageInput]
}

input ImageInput {
  """
  file Uploaded
  """
	# file: Upload!
	subjectCode: String
}

input DeliveredProduct {
	id: Int!
	quantity: Int!
}

"""
A paginated list of Shipment items.
"""
type ShipmentPaginator {
	"""
	Pagination information about the list of items.
	"""
	paginatorInfo: PaginatorInfo!

	"""
	A list of Shipment items.
	"""
	data: [Shipment!]!
}

input ListShipmentsFilterInput {
	id: [Int]
	code: [String]
	search: String
	refNumber: [String]
	typeCode: ShipmentTypeCode
	paymentTypeCode: ShipmentPaymentTypeCode
	customerTypeCode: CustomerTypeCode
	branchId: Int
	originBranchId: Int
	serviceId: Int
	customerId: Int
	userId: Int
	inDeliveryAgentCustody: DeliveryAgentCustodyInput
	senderZoneId: [Int]
	senderSubzoneId: [Int]
	recipientZoneId: [Int]
	recipientSubzoneId: [Int]
	date: DateFilterInput
	lastTransactionDate: DateFilterInput
	deliveredOrReturnedDate: DateFilterInput
	statusCode: [ShipmentStatusCode]
	deliveryTypeCode: ShipmentDeliveryTypeCode
	returnTypeCode: ShipmentReturnTypeCode
	pendingCustomerAdjusting: Boolean
	pendingCustomerPayment: Boolean
	notDelivered: Boolean
	collected: Boolean
	paid: Boolean
	delivered: Boolean
	inWarehouse: Boolean
	forUnpacking: Boolean
	pendingCollection: Boolean
	lastDeliveryAgentId: Int
	deliveryBefore: Date
	sectionId: Int
	hasProducts: Boolean
	new: Boolean
	cancelled: Boolean
	routeId: [Int]
}

input DeliveryAgentCustodyInput {
	deliveryAgentId: Int
}

"""
Shipment return type code
"""
enum ShipmentReturnTypeCode {
	"""
	Ffc
	"""
	FFC

	"""
	Fpc
	"""
	FPC

	"""
	Wfdf
	"""
	WFDF

	"""
	Wodf
	"""
	WODF

	"""
	Wpdf
	"""
	WPDF

	"""
	Prts
	"""
	PRTS
}

"""
Shipment delivery type code
"""
enum ShipmentDeliveryTypeCode {
	"""
	Fd
	"""
	FD

	"""
	Pd
	"""
	PD
}

"""
Shipment status code
"""
enum ShipmentStatusCode {
	"""
	Bmr
	"""
	BMR

	"""
	Bmt
	"""
	BMT

	"""
	Dex
	"""
	DEX

	"""
	Dtr
	"""
	DTR

	"""
	Htr
	"""
	HTR

	"""
	Otd
	"""
	OTD

	"""
	Otr
	"""
	OTR

	"""
	Pkd
	"""
	PKD

	"""
	Pkh
	"""
	PKH

	"""
	Pkm
	"""
	PKM

	"""
	Pkr
	"""
	PKR

	"""
	Rits
	"""
	RITS

	"""
	Rjct
	"""
	RJCT

	"""
	Rtrn
	"""
	RTRN

	"""
	Rts
	"""
	RTS

	"""
	Prp
	"""
	PRP

	"""
	Prpd
	"""
	PRPD

	"""
	Std
	"""
	STD

	"""
	Rcv
	"""
	RCV
}

input DateFilterInput {
	fromDays: Int
	fromDate: Date
	toDate: Date
}

type Shipment {
	id: Int!
	code: String!
	type: LookupEntry!
	openable: LookupEntry!
	date: DateTime!
	createdAt: DateTime!
	updatedAt: DateTime
	deliveryDate: Date
	deliveredOrReturnedDate: DateTime

	description: String
	weight: Float!
	piecesCount: Int!
	collected: Boolean!
	paidToCustomer: Boolean!
	paidToDeliveryAgent: Boolean!
	editable: Boolean!
	trackingUrl: String!
	deletable: Boolean!

	hasProducts: Boolean!
	inWarehouse: Boolean!
	unpacked: Boolean!
	refNumber: String
	notes: String
	adminNotes: String
	returnPiecesCount: Int
	paymentType: LookupEntry!
	priceType: LookupEntry!
	deliveryType: LookupEntry
	returnType: LookupEntry
	transactionType: TransactionType!
	branch: Branch!
	originBranch: Branch!
	status: LookupEntry!
	returnStatus: LookupEntry

	service: ShippingService!
	history: [Shipment!]!
	createdBy: User!
	updatedBy: User
	warehouseSection: WarehouseSection
	customerType: LookupEntry!
	attempts: Int
	cancellable: Boolean!
	cancelled: Boolean!

	price: Float!
	amount: Float!
	deliveryFees: Float!
	extraWeightFees: Float!
	collectionFees: Float!
	totalAmount: Float!
	deliveredAmount: Float!
	returningDueFees: Float!
	returnedValue: Float!
	allDueFees: Float!
	collectedFees: Float!
	customerDue: Float!
	collectedAmount: Float!
	pendingCollectionAmount: Float!
	returnFees: Float!
	postFees: Float!
	tax: Float!
	deliveryCommission: Float

	recipientName: String
	recipientPhone: String
	recipientMobile: String!
	recipientZone: Zone!
	recipientSubzone: Zone!
	recipientAddress: String!
	recipientPostalCode: String
	recipientLatitude: Float
	recipientLongitude: Float

	senderName: String
	senderPhone: String
	senderMobile: String
	senderZone: Zone
	senderSubzone: Zone
	senderAddress: String
	senderPostalCode: String
	senderLatitude: Float
	senderLongitude: Float

	deliveryOtp: String
	hasDeliveryOtp: Boolean!
	images: [Image]
}

type ShippingService {
	id: Int!
	code: String!
	name: String!
	days: Int!
	egsCode: String
	active: Boolean!
	branch: Branch
	shipmentTypes: [LookupEntry]
}

type TransactionType {
	id: Int!
	code: String!
	name: String!
	active: Boolean!
	type: LookupEntry
	sequence: Sequence
	branch: Branch
}

type Zone {
	id: Int!
	code: String!
	name: String!
	parent: Zone
	active: Boolean
	branch: Branch
	children: [Zone]
}

type Branch {
	id: Int!
	code: String!
	name: String!
	active: Boolean!
	main: Boolean!
	address: String
	phone: String
	fax: String
	country: Country
	state: State
	city: City
	area: Area
	warehouseSections: [WarehouseSection]
}

type WarehouseSection {
	id: Int!
	name: String!
	branch: Branch!
	active: Boolean!
	shipments: [Shipment]
}

type Area {
	id: Int!
	code: String!
	name: String!
	city: City!
}

type City {
	id: Int!
	code: String!
	name: String!
	state: State!
}

type State {
	id: Int!
	code: String!
	name: String!
	country: Country!
}

type Country {
	id: Int!
	code: String!
	name: String!
}

type Sequence {
	id: Int!
	code: String!
	name: String!
}

type Lookup {
	id: Int!
	code: String!
	name: String!
	entries: [LookupEntry]
}

type LookupEntry {
	id: Int!
	code: String!
	name: String!
	active: Boolean
	weight: Int!
	lookup: Lookup!
	mobileActive: Boolean
}

input ShipmentInput {
	id: Int
	code: String
	date: DateTime
	deliveryDate: Date
	serviceId: Int!
	customerId: Int
	transactionTypeId: Int
	originBranchId: Int
	branchId: Int
	description: String
	refNumber: String
	weight: Float
	size: BoxSizeInput
	piecesCount: Int
	returnPiecesCount: Int
	price: Float
	notes: String
	receiveInWarehouse: Boolean
	typeCode: ShipmentTypeCode
	priceTypeCode: ShipmentPriceTypeCode
	paymentTypeCode: ShipmentPaymentTypeCode
	openableCode: ShipmentOpenableCode
	shipmentProducts: [ShipmentProductInput]
	deliveryCommission: Float

	senderName: String
	senderZoneId: Int
	senderSubzoneId: Int
	senderPhone: String
	senderMobile: String
	senderAddress: String
	senderPostalCode: String
	senderLatitude: Float
	senderLongitude: Float

	recipientName: String
	recipientZoneId: Int!
	recipientSubzoneId: Int!
	recipientPhone: String!
	recipientMobile: String!
	recipientAddress: String!
	recipientPostalCode: String
	recipientLatitude: Float
	recipientLongitude: Float

	deliveryFees: Float
	extraWeightFees: Float
	collectionFees: Float
	returnFees: Float
}

input ShipmentProductInput {
	productId: Int!
	price: Float!
	quantity: Int!
	typeCode: ShipmentProductTypeCode
}

"""
Shipment product type code
"""
enum ShipmentProductTypeCode {
	"""
	In
	"""
	IN

	"""
	Out
	"""
	OUT
}

"""
Shipment openable code
"""
enum ShipmentOpenableCode {
	"""
	Y
	"""
	Y

	"""
	N
	"""
	N
}

"""
Shipment payment type code
"""
enum ShipmentPaymentTypeCode {
	"""
	Colc
	"""
	COLC

	"""
	Paid
	"""
	PAID

	"""
	Cash
	"""
	CASH

	"""
	Crdt
	"""
	CRDT

	"""
	Visa
	"""
	VISA
}

"""
Shipment price type code
"""
enum ShipmentPriceTypeCode {
	"""
	Excld
	"""
	EXCLD

	"""
	Incld
	"""
	INCLD
}

"""
Shipment type code
"""
enum ShipmentTypeCode {
	"""
	Fdp
	"""
	FDP

	"""
	Pdp
	"""
	PDP

	"""
	Ptp
	"""
	PTP

	"""
	Rts
	"""
	RTS

	"""
	Clc
	"""
	CLC
}

input BoxSizeInput {
	length: Float!
	width: Float!
	height: Float!
}

type DropDownEntry {
	id: Int
	code: String
	name: String
}

input LoginInput {
	username: String!
	password: String!
	rememberMe: Boolean! = true
	fcmToken: String
}

type UserWithToken {
	user: User!
	token: String!
	ttl: String!
}

type User {
	id: Int!
	username: String!
	active: Boolean!
	isSuper: Boolean!
	userBranches: [UserBranch]!
	roles: [Role!]!
	permissions: [Permission]!
}

type Role {
	id: Int!
	code: String!
	name: String!
	permissions: [Permission]!
	usersCount: Int!
}

type Permission {
	id: Int!
	name: String!
	slug: String!
}

type UserBranch {
	user: User!
	branch: Branch!
	default: Boolean!
}

input ListZonesFilterInput {
	name: String
	parentId: Int
	countryId: Int
	branchId: Int
	active: Boolean
	service: FilterZonesByServiceInput
}

input FilterZonesByServiceInput {
	serviceId: Int!
	customerId: Int
	customerTypeCode: CustomerTypeCode
	fromZoneId: Int
	fromSubzoneId: Int
}

"""
Customer type code
"""
enum CustomerTypeCode {
	"""
	Merchant
	"""
	MERCHANT

	"""
	Individual
	"""
	INDIVIDUAL

	"""
	Concierge
	"""
	CONCIERGE
}

type CommissionList {
  id: Int!
  code: String!
  name: String!
  description: String
  active: Boolean!
  destinations: [CommissionListDestination]
}

type CommissionListDestination {
  id: Int!
  zone: Zone!
  subzone: Zone
  commissionType: LookupEntry!
  commission: Float!
  active: Boolean!
}

type DeliveryAgent {
  id: Int!
  code: String!
  name: String!
  commission: Float
  reviewAvg: Float
  reviewCount: Int!
  address: String
  postalCode: String
  mailBox: String
  pickupCommission: Boolean
  active: Boolean!
  phone: String
  mobile: String
  email: String
  autoPayCommission: Boolean
  country: Country
  state: State
  city: City
  area: Area
  branch: Branch
  commissionList: CommissionList
  commissionType: LookupEntry
  paidCommission: Float!
  notPaidCommission: Float!
  collectionDueAmount: Float! 
  commissionDueAmount: Float! 
  users: [User]
}
